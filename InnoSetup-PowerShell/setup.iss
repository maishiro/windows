; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
#include "xmlFile.iss"

#define MyAppName "My Program"
#define MyAppVersion "1.5"
#define MyAppPublisher "My Company, Inc."
#define MyAppURL "http://www.example.com/"
#define MyAppExeName "MyProg.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{58C698DA-9AD0-47A5-B3DF-DFB133DF52CF}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
CreateAppDir=no
OutputBaseFilename=setup
Compression=lzma
SolidCompression=yes
; インストールしても、アプリケーションの追加と削除に表示しない
Uninstallable=false
; アプリケーションのCPUアーキテクチャ指定(環境変数が変わることがある ex. ProgramFiles)
ArchitecturesInstallIn64BitMode=x64
; インストール準備中に必要なファイルを使っているアプリがあると、セットアップがそのアプリを閉じて後で再開するか確認します
; CloseApplications=no

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "japanese"; MessagesFile: "compiler:Languages\Japanese.isl"

[Files]
Source: "callENV.ps1"; DestDir: "{tmp}"; Flags: deleteafterinstall
Source: "callENV.bat"; DestDir: "{tmp}"; Flags: deleteafterinstall

; [Run]
; Filename: "cmd.exe"; Parameters: "/C ""{tmp}\callENV.bat"""; WorkingDir: "{tmp}"; Flags: waituntilterminated
; Filename: "powershell.exe"; Parameters: "-ExecutionPolicy Bypass -File ""{tmp}\callENV.ps1"""; WorkingDir: "{tmp}"; Flags: waituntilterminated runhidden

[Code]
// Called after a new wizard page (specified by CurPageID) is shown.
procedure CurPageChanged(CurPageID: Integer);
begin
  case CurPageID of
    wpWelcome: Log( 'CurPageChanged  CurPageID: wpWelcome' );
    wpLicense: Log( 'CurPageChanged  CurPageID: wpLicense' );
    wpPassword: Log( 'CurPageChanged  CurPageID: wpPassword' );
    wpInfoBefore: Log( 'CurPageChanged  CurPageID: wpInfoBefore' );
    wpUserInfo: Log( 'CurPageChanged  CurPageID: wpUserInfo' );
    wpSelectDir: Log( 'CurPageChanged  CurPageID: wpSelectDir' );
    wpSelectComponents: Log( 'CurPageChanged  CurPageID: wpSelectComponents' );
    wpSelectProgramGroup: Log( 'CurPageChanged  CurPageID: wpSelectProgramGroup' );
    wpSelectTasks: Log( 'CurPageChanged  CurPageID: wpSelectTasks' );
    wpReady: Log( 'CurPageChanged  CurPageID: wpReady' );
    wpPreparing:
    begin
      Log( 'CurPageChanged  CurPageID: wpPreparing' );
    end;
    wpInstalling: Log( 'CurPageChanged  CurPageID: wpInstalling' );
    wpInfoAfter: Log( 'CurPageChanged  CurPageID: wpInfoAfter' );
    wpFinished: Log( 'CurPageChanged  CurPageID: wpFinished' );
  else
    Log( 'CurPageChanged  CurPageID: else' );
  end;
end;

// You can use this event function to detect and install missing prerequisites and/or to shutdown any application which is about to be updated.
function PrepareToInstall(var NeedsRestart: Boolean): String;
begin
  Log( 'PrepareToInstall  NeedsRestart: '+IntToStr(NeedsRestart) );

end;

// You can use this event function to perform your own pre-install and post-install tasks.
procedure CurStepChanged(CurStep: TSetupStep);
var
  Code: Integer;
  xmldoc: Variant;
  ElementValue: String;
begin
  if CurStep = ssInstall then
  begin
    Log( 'CurStepChanged  ssInstall' );
    Log( 'CurStepChanged  {tmp}: '+ExpandConstant('{tmp}') );
    // ExtractTemporaryFiles('{tmp}\callENV.ps1');
    // Exec( 'powershell.exe', ' -ExecutionPolicy Bypass -File '+ExpandConstant('{tmp}\callENV.ps1'), '', SW_HIDE, ewWaitUntilTerminated, Code )
    // for DEBUG
    // ExtractTemporaryFiles('{tmp}\callENV.bat');
    Exec( 'cmd.exe', ' /C '+ExpandConstant('{tmp}\callENV.bat'), '', SW_SHOW, ewWaitUntilTerminated, Code )
    // for DEBUG
    Log( 'CurStepChanged  Exec - ResultCode: '+IntToStr(Code) );

    // if XMLOpenFile( ExpandConstant('{app}\config.xml'), xmldoc ) then
    // begin
    //   XMLReadValue( xmldoc, '/config/runtime', ElementValue );
    //   Log( '/config/runtime: '+ElementValue );
    //   if not SameStr('net8.0',ElementValue) then
    //   begin
    //     XMLUpdateValue( xmldoc, '/config/runtime', 'net8.0' );
    //     XMLSaveFile( xmldoc, ExpandConstant('{app}\config.xml') );
    //   end;
    // end;

  end
  else if ( CurStep = ssPostInstall ) then
  begin
    Log( 'CurStepChanged  ssPostInstall' );

  end
  else
  begin
    Log( 'CurStepChanged  ssDone' );

  end;
end;

// You can use this event function to monitor progress while Setup is extracting files, creating shortcuts, creating INI entries, and creating registry entries.
procedure CurInstallProgressChanged(CurProgress, MaxProgress: Integer);
begin
  Log( 'CurInstallProgressChanged  CurProgress: '+IntToStr(CurProgress)+' MaxProgress: '+IntToStr(MaxProgress) );
end;

